#4. Transition Classes
r[] <- 1
tr1 <- transition(r, transitionFunction=mean, directions=8)
tr1
#Creating an Asymmetric Matrix
r[] <- runif(9)
ncf <- function(x) max(x) - x[1] + x[2]
tr2 <- transition(r, ncf, 4, symm=FALSE)
tr2
#The class dgCMatrix holds an asymmetric matrix.
tr3 <- tr1*tr2
tr3 <- tr1+tr2
tr3 <- tr1*3
tr3 <- sqrt(tr1)
tr3[cbind(1:9, 1:9)] <- tr2[cbind(1:9, 1:9)]
tr3[1:9, 1:9] <- tr2[1:9, 1:9]
tr3[1:5, 1:5]
image(transitionMatrix(tr1))
############  Hiking around Maunga Whau ##############
#First, we read in the altitude data for the volcano.
r <- raster(system.file("external/maungawhau.grd", package="gdistance"))
#finding the slope
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd) # use the geoCorrection function to divide by the distance between cells.
#adjacent cells have a slope ≠ 0; this f() restricts calculations to adjacent cells
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
## Retrieve a Conductance matrix:DDDDD
Conductance[1:3, 1:3]
image(Conductance[1:3, 1:3]) #I think darker numbers equal highest conductance
#defining two points on the graph
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
#Calculating Distances
sP <- cbind(c(2667670,2667800 ), c(6479000,6479400))
costDistance(Conductance, sP)
rSPDistance(Conductance, sP, sP, theta=1e-12, totalNet = "total")
################ Geographical Genetics #########################
Europe <- raster(system.file("external/Europe.grd", package="gdistance"))
Europe[is.na(Europe)] <- 0
data(genDist)
data(popCoord)
pC <- as.matrix(popCoord[c("x","y")])
geoDist <- pointDistance(pC, longlat=TRUE)
geoDist <- as.dist(geoDist)
Europe <- aggregate(Europe,3)
tr <- transition(Europe, mean, directions=8)
trC <- geoCorrection(tr, "c", scl=TRUE)
trR <- geoCorrection(tr, "r", scl=TRUE)
cosDist <- costDistance(trC,pC)
resDist <- commuteDistance(trR, pC)
cor(genDist,geoDist)
cor(genDist,cosDist)
cor(genDist,resDist)
origin <- unlist(popCoord[22,c("x","y")])
pI <- pathInc(trC, origin=origin, from=pC,functions=list(overlap))
cor(genDist,pI[[1]])
Conductance
Conductance[1:5, 1:5]
image(Conductance[1:5, 1:5]) #I think darker numbers equal highest conductance
rSPDistance(Conductance, sP, sP, theta=1e-12, totalNet = "total")
costDistance(Conductance, sP)
sP <- cbind(c(2667670,2667800 ), c(5479000,5479400))
costDistance(Conductance, sP)
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd) # use the geoCorrection function to divide by the distance between cells.
#adjacent cells have a slope ≠ 0; this f() restricts calculations to adjacent cells
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
## Retrieve a Conductance matrix:DDDDD
Conductance[1:5, 1:5]
image(Conductance[1:5, 1:5]) #I think darker numbers equal highest conductance
#defining two points on the graph
A <- c(2667670, 5479000)
B <- c(2667800, 5479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
#Calculating Distances
sP <- cbind(c(2667670,2667800 ), c(5479000,5479400))
costDistance(Conductance, sP)
rSPDistance(Conductance, sP, sP, theta=1e-12, totalNet = "total")
#install.packages("gdistance")
#library("gdistance")
set.seed(13)
r <- raster(ncol=3,nrow=3)
r[] <- 1:ncell(r)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
text(r)
#4. Transition Classes
r[] <- 1
tr1 <- transition(r, transitionFunction=mean, directions=8)
tr1
#Creating an Asymmetric Matrix
r[] <- runif(9)
ncf <- function(x) max(x) - x[1] + x[2]
tr2 <- transition(r, ncf, 4, symm=FALSE)
tr2
#The class dgCMatrix holds an asymmetric matrix.
tr3 <- tr1*tr2
tr3 <- tr1+tr2
tr3 <- tr1*3
tr3 <- sqrt(tr1)
tr3[cbind(1:9, 1:9)] <- tr2[cbind(1:9, 1:9)]
tr3[1:9, 1:9] <- tr2[1:9, 1:9]
tr3[1:5, 1:5]
image(transitionMatrix(tr1))
############  Hiking around Maunga Whau ##############
#First, we read in the altitude data for the volcano.
r <- raster(system.file("external/maungawhau.grd", package="gdistance"))
#finding the slope
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd) # use the geoCorrection function to divide by the distance between cells.
#adjacent cells have a slope ≠ 0; this f() restricts calculations to adjacent cells
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
## Retrieve a Conductance matrix:DDDDD
Conductance[1:3, 1:3]
image(Conductance[1:3, 1:3]) #I think darker numbers equal highest conductance
#defining two points on the graph
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
#Calculating Distances
sP <- cbind(c(2667670,2667800 ), c(6479000,6479400))
costDistance(Conductance, sP)
rSPDistance(Conductance, sP, sP, theta=1e-12, totalNet = "total")
################ Geographical Genetics #########################
Europe <- raster(system.file("external/Europe.grd", package="gdistance"))
Europe[is.na(Europe)] <- 0
data(genDist)
data(popCoord)
pC <- as.matrix(popCoord[c("x","y")])
geoDist <- pointDistance(pC, longlat=TRUE)
geoDist <- as.dist(geoDist)
Europe <- aggregate(Europe,3)
tr <- transition(Europe, mean, directions=8)
trC <- geoCorrection(tr, "c", scl=TRUE)
trR <- geoCorrection(tr, "r", scl=TRUE)
cosDist <- costDistance(trC,pC)
resDist <- commuteDistance(trR, pC)
cor(genDist,geoDist)
cor(genDist,cosDist)
cor(genDist,resDist)
origin <- unlist(popCoord[22,c("x","y")])
pI <- pathInc(trC, origin=origin, from=pC,functions=list(overlap))
cor(genDist,pI[[1]])
Conductance
rm(list=ls())
#First, we read in the altitude data for the volcano.
r <- raster(system.file("external/maungawhau.grd", package="gdistance"))
#finding the slope
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd) # use the geoCorrection function to divide by the distance between cells.
#adjacent cells have a slope ≠ 0; this f() restricts calculations to adjacent cells
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
## Retrieve a Conductance matrix:DDDDD
Conductance[1:3, 1:3]
image(Conductance[1:3, 1:3]) #I think darker numbers equal highest conductance
#defining two points on the graph
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
Conductance
Conductance[1:87, 1:61]
image(Conductance[1:87, 1:61]) #I think darker numbers equal highest conductance
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
sP <- cbind(c(2667670,2667800 ), c(6479000,6479400))
costDistance(Conductance, sP)
rSPDistance(Conductance, sP, sP, theta=1e-12, totalNet = "total")
Conductance[1:3, 1:3]
sP <- cbind(c(2667670,2667800 ), c(6479000,6479400))
costDistance(Conductance, sP)
rSPDistance(Conductance, sP, sP, theta=1e-12, totalNet = "total")
library(FedData)
vepPolygon <- polygon_from_extent(raster::extent(672800,672950,4102000,4104000),proj4string="+proj=utm +datum=NAD83 +zone=12")
NED <- get_ned(template=vepPolygon,label="VEPIIN")
set.seed(123)
r <- raster(NED)
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd)
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
A <- c(672800, 4102000)
B <- c(740000, 4170000)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
source("/Users/annacalderon/Desktop/gENM/src")
source("/Users/annacalderon/Desktop/gENM/src/RDataTracker.R")
setwd("~/Desktop/gENM/src")
source("/Users/annacalderon/Desktop/gENM/src/RDataTracker.R")
ddg.run("gdistance_template.R")
##-ddg-- Fri Jun 24 15:23:50 2016 ------##
ddg.run("gdistance_template.R",load = TRUE)
##-ddg-- Fri Jun 24 15:24:04 2016 ------##
source("/Users/annacalderon/Desktop/gENM/src/RDataTracker.R")
ddg.run("gdistance_template.R",load = TRUE)
##-ddg-- Fri Jun 24 15:26:56 2016 ------##
source("/Users/annacalderon/Desktop/gENM/src/RDataTracker.R")
ddg.run("gdistance_template.R",load = TRUE)
##-ddg-- Fri Jun 24 15:31:20 2016 ------##
source("/Users/annacalderon/Desktop/gENM/src/RDataTracker.R")
ddg.run("gdistance_template.R",load = TRUE)
##-ddg-- Fri Jun 24 15:31:32 2016 ------##
A <- c(672800, 4102000)
B <- c(672950, 4104000)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
?shortestpath
?shortestPath
?SpatialLines
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd) # use the geoCorrection function to divide by the distance between cells.
#adjacent cells have a slope ≠ 0; this f() restricts calculations to adjacent cells
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
## Retrieve a Conductance matrix:DDDDD
Conductance[1:87, 1:61]
image(Conductance[1:87, 1:61]) #I think darker numbers equal highest conductance
#defining two points on the graph
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
rm(list=ls())
set.seed(123)
r <- raster(ncol=3,nrow=3)
r[] <- 1:ncell(r)
r
plot(r, main="r", xlab="Longitude (degrees)", ylab="Latitude (degrees)")
text(r)
#4. Transition Classes
r[] <- 1
tr1 <- transition(r, transitionFunction=mean, directions=8)
tr1
#Creating an Asymmetric Matrix
r[] <- runif(9)
ncf <- function(x) max(x) - x[1] + x[2]
tr2 <- transition(r, ncf, 4, symm=FALSE)
tr2
#The class dgCMatrix holds an asymmetric matrix.
tr3 <- tr1*tr2
tr3 <- tr1+tr2
tr3 <- tr1*3
tr3 <- sqrt(tr1)
tr3[cbind(1:9, 1:9)] <- tr2[cbind(1:9, 1:9)]
tr3[1:9, 1:9] <- tr2[1:9, 1:9]
tr3[1:5, 1:5]
image(transitionMatrix(tr1))
############  Hiking around Maunga Whau ##############
#First, we read in the altitude data for the volcano.
r <- raster(system.file("external/maungawhau.grd", package="gdistance"))
#finding the slope
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd) # use the geoCorrection function to divide by the distance between cells.
#adjacent cells have a slope ≠ 0; this f() restricts calculations to adjacent cells
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
## Retrieve a Conductance matrix:DDDDD
Conductance[1:87, 1:61]
image(Conductance[1:87, 1:61]) #I think darker numbers equal highest conductance
#defining two points on the graph
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)", xlim = c(2667200, 2668000))
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
#Calculating Distances
sP <- cbind(c(2667670,2667800 ), c(6479000,6479400))
costDistance(Conductance, sP)
ddg.run("gdistance.R")
library(RDataTracker)
ddg.run("gdistance.R")
##-ddg-- Fri Jun 24 15:45:28 2016 ------##
detach("package:RDataTracker", unload=TRUE)
source("/Users/annacalderon/Desktop/gENM/src/RDataTracker.R")
ddg.run("gdistance.R")
##-ddg-- Fri Jun 24 15:47:10 2016 ------##
vepPolygon <- polygon_from_extent(raster::extent(672800,672950,4102000,4104000),proj4string="+proj=utm +datum=NAD83 +zone=12")
NED <- get_ned(template=vepPolygon,label="VEPIIN")
set.seed(123)
r <- raster(NED)
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd)
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
## Retrieve a Conductance matrix:DDDDD
#Conductance[1:3, 1:3]
image(Conductance[1:3, 1:3]) #I think darker numbers equal highest conductance
#defining two points on the graph
A <- c(672800, 4102000)
B <- c(672950, 4104000)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
vepPolygon <- polygon_from_extent(raster::extent(672800,740000,4102000,4170000),proj4string="+proj=utm +datum=NAD83 +zone=12")
NED <- get_ned(template=vepPolygon,label="VEPIIN")
set.seed(123)
r <- raster(NED)
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd)
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
## Retrieve a Conductance matrix:DDDDD
#Conductance[1:3, 1:3]
image(Conductance[1:3, 1:3]) #I think darker numbers equal highest conductance
#defining two points on the graph
A <- c(672800, 4102000)
B <- c(672950, 4104000)
vepPolygon <- polygon_from_extent(raster::extent(672800,740000,4102000,4170000),proj4string="+proj=utm +datum=NAD83 +zone=12")
NED <- get_ned(template=vepPolygon,label="VEPIIN")
set.seed(123)
r <- raster(NED)
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd)
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
## Retrieve a Conductance matrix:DDDDD
#Conductance[1:3, 1:3]
image(Conductance[1:3, 1:3]) #I think darker numbers equal highest conductance
#defining two points on the graph
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
vepPolygon <- polygon_from_extent(raster::extent(672800,740000,4102000,4170000),proj4string="+proj=utm +datum=NAD83 +zone=12")
NED <- get_ned(template=vepPolygon,label="VEPIIN")
set.seed(123)
r <- raster(NED)
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd)
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
## Retrieve a Conductance matrix:DDDDD
#Conductance[1:3, 1:3]
image(Conductance[1:3, 1:3]) #I think darker numbers equal highest conductance
#defining two points on the graph
A <- c(672800, 4102000)
B <- c(740000, 4170000)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
source("/Users/annacalderon/Desktop/gENM/sr")
source("/Users/annacalderon/Desktop/gENM/src/RDataTracker.R")
ddg.run("gdistance_template.R")
##-ddg-- Fri Jun 24 16:09:56 2016 ------##
remove.packages("gdistance", lib="~/Library/R/3.2/library")
remove.packages("FedData", lib="~/Library/R/3.2/library")
r <- NED
library("gdistance")
library(FedData)
## 1. working directory
wd <- '.' # default is the current working directory
setwd(wd)
vepPolygon <- polygon_from_extent(raster::extent(-73.6,-66.4,41.16,47.58),proj4string="+proj=longlat +datum=WGS84 +ellps=WGS84")
vepPolygon <- polygon_from_extent(raster::extent(-72.237179, -72.132233, 42.499695, 42.536449),
proj4string="+proj=longlat +ellps=WGS84 +datum=WGS84")
NED <- get_ned(template=vepPolygon,raw.dir='../data/NED/RAW',extraction.dir='../data/NED/EXTRACTIONS',label="HF",res='1',force.redo=TRUE)
image(NED,  xlab="longitude", ylab= "latitude")
points(Gspecies$lon, Gspecies$lat, col="darkolivegreen4", pch=20, cex=0.5)
set.seed(123)
r <- NED
altDiff <- function(x){x[2] - x[1]}
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd)
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
## Retrieve a Conductance matrix:DDDDD
#defining two points on the graph
xlims <- as.vector(r@extent)[1:2]
ylims <- as.vector(r@extent)[3:4]
A <- c(runif(1,xlims[1],xlims[2]),runif(1,ylims[1],ylims[2]))
B <- c(runif(1,xlims[1],xlims[2]),runif(1,ylims[1],ylims[2]))
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)")
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
#Calculating Distances
sP <- cbind(c(-72.20,-72.16, -72.18, -72.15), c(42.515, 42.530, 42.510, 42.520))
points(sP, col="snow", pch=20, cex=.75)
text(x=-72.199, y=42.515, "1", col="black", cex=.5)
text(x=-72.159, y=42.530, "2", col="black", cex=.5)
text(x=-72.179, y=42.510, "3", col="black", cex=.5)
text(x=-72.149, y=42.520, "4", col="black", cex=.5)
costDistance(Conductance, sP)
dist(as.matrix(costDistance(Conductance, sP)))
?dist
?maxValue(costDistance(Conductance, sP))
costDistance(Conductance, sP)
which(mm == max(mm), arr.ind = TRUE)
cd <- costDistance(Conductance, sP)
which(cd == max(mm), arr.ind = TRUE)
which(cd == max(cd), arr.ind = TRUE)
costDistance(Conductance, sP)
cd/which(cd == max(cd), arr.ind = TRUE)
(cd)/(which(cd == max(cd), arr.ind = TRUE))
cd
cd/952.3798
cd/(which(cd == max(cd), arr.ind = TRUE))
cd/max(cd)
Bprob <- cd/max(cd)
Bprob
1/(1+4[1-Bprop])
1-Bprob
m <- 1-Bprob
1/(1+4*m)
Fst <- 1/(1+4*m)
Fst <- 1/(1+4*4*m)
1/(1+4*4*m)
1/(1+4*m)
Fst <- 1/(1+4*m)
rSPDistance(Conductance, sP, sP, theta=1e-12, totalNet = "total")
Fst
Bprob
1/(1+4*m)
m <- 1-Bprob #the probability that individuals will migrate
1-Bprob
m
Fst
diag(Fst) <- 0
Fst
costDistance(Conductance, sP)
?function
?function
?function
hello
GspeciesBC <- function ((path == ""){path <- "../data"}
filename <- ("GspeciesBC_2.5.grd")
paste(path,filename, sep="/")
croppeddata<- paste(path,filename, sep="/"))
GspeciesBC <- function (l = (path == ""){path <- "../data"}
filename <- ("GspeciesBC_2.5.grd")
paste(path,filename, sep="/")
croppeddata<- paste(path,filename, sep="/"))
function(if (path == ""){path <- "../data"}
filename <- ("GspeciesBC_2.5.grd")
paste(path,filename, sep="/")
croppeddata<- paste(path,filename, sep="/")
